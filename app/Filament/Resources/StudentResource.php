<?php

namespace App\Filament\Resources;

use App\Models\Student;
use App\Models\ClassMaster;
use App\Models\Branch;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Filament\Forms\Components\BelongsToSelect;
use Filament\Tables\Columns\DateTimeColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;
use Filament\Forms\Components\Tabs;
use Filament\Tables\Columns;
use Filament\Tables\Actions;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Radio;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\ToggleButtons;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use App\Filament\Resources\StudentResource\RelationManagers;
use App\Filament\Resources\StudentResource\Pages as StudentPages;
use Closure;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Illuminate\Support\Str;
use Filament\Support\RawJs;

class StudentResource extends Resource
{
    protected static ?string $model = Student::class;
    protected static ?string $navigationGroup = 'Students';
    protected static ?string $navigationLabel = 'Student';
    protected static ?int $navigationSort = 1;

    //protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form  
             ->schema([
                    Tabs::make('Tabs')
                    ->tabs([
                        Tabs\Tab::make('Student Details')
                            ->icon('heroicon-o-user')
                            ->schema([
                                Section::make([
                                    TextInput::make('enroll_no')
                                        ->label('Enroll No')
                                        ->placeholder('stu_xxxxxx')
                                        ->hintIcon('heroicon-m-question-mark-circle', tooltip: 'Enroll No will be auto generated by system.')
                                        ->hintColor('primary')
                                        ->disabled(),
                                    TextInput::make('first_name')
                                        ->placeholder('First Name')
                                        ->required()
                                        //->hidden(fn (Get $get): bool => ! $get('is_company'))
                                        ->maxLength(200),
                                    Select::make('classid')
                                        ->label('Class')
                                        ->options(config('constants.typeClassCode'))
                                        //->options(ClassMaster::all()->where('status',1)->pluck('class','id'))
                                        ->afterStateUpdated(fn (Set $set, ?string $state) => $set('branch_id', ''))
                                        ->native(false)
                                        ->required()
                                        ->searchable()
                                        ->live()
                                        ->preload(),
                                    Radio::make('gender')
                                        ->options(config('constants.typeGender'))
                                        ->required()
                                        ->default(1)
                                        ->inlineLabel(true)
                                        ->inline(true),
                                    Radio::make('admission_type')
                                        ->label('Enrollment')
                                        ->options(config('constants.typeAdmission'))
                                        ->required()
                                        ->default(1)
                                        ->inline()
                                        ->inlineLabel(true),
                                    Select::make('medium')
                                        ->options(config('constants.typeMedium'))
                                        ->default(1)
                                        ->native(false)
                                        ->preload(), 
                                    Select::make('blood_group')
                                        ->options(config('constants.typeBlood'))
                                        ->native(false)
                                        ->searchable()
                                        ->preload(),   
                                    TextInput::make('email')
                                        ->label('Student Email')
                                        ->email()
                                        ->placeholder('xyz@domain.com'),    
                                    TextInput::make('contact_no')
                                        ->label('Contact Number')
                                        ->prefix('+91')
                                        ->tel()
                                        ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/')
                                        ->minValue(10)
                                        ->maxValue(10)
                                        ->placeholder('Contact Number'), 
                                        
                                ])->compact()->columnSpan(1),
                                Section::make([
                                    Select::make('academic_id')
                                        ->label('Academic Year')
                                        ->options([ 
                                            1=> 'April 2024 - March 2025',
                                            2 => 'April 2023 - March 2024',
                                            3 => 'April 2022 - March 2023'
                                            ])
                                        ->native(false)
                                        //->disabledOn('edit')
                                        ->required(),
                                    TextInput::make('middle_name')
                                        ->placeholder('Middle Name')
                                        ->maxLength(50),
                                    Select::make('branch_id')
                                        ->label('Branch')
                                        ->options(fn (Get $get): array => Branch::all()
                                        ->where('class_id', $get('classid'))
                                        ->pluck('branch_name', 'id')->all())
                                        ->native(false)
                                        ->searchable()
                                        ->preload(),
                                    DatePicker::make('dob')
                                        ->label('Date of birth')
                                        ->required()
                                        ->placeholder('Date of birth')
                                        ->displayFormat('d/m/Y')
                                        ->closeOnDateSelection()
                                        ->native(false)
                                        ->maxDate(now()),  
                                    TextInput::make('aadhaar')
                                        ->label('Aadhaar No')
                                        ->mask('9999-9999-9999')
                                        ->placeholder('xxxx-xxxx-xxxx'), 
                                    TextInput::make('hobbies')
                                        ->placeholder('e.g. Reading, Dancing, etc'), 
                                    Select::make('status')
                                        ->options(config('constants.typeStudentStatus'))
                                        ->native(false)
                                        ->default(1)
                                        ->required()
                                        ->preload(),     
                                        

                                ])->compact()->columnSpan(1),
                                Section::make([
                                    TextInput::make('roll_no')
                                        ->numeric()
                                        ->step(1)
                                        ->label('Roll Number')
                                        ->placeholder('Roll Number'),
                                    TextInput::make('last_name')
                                        ->placeholder('Last Name')
                                        ->required()
                                        ->maxLength(200),
                                    Select::make('sec_id')
                                        ->label('Section')
                                        ->options(config('constants.typeSection'))
                                        ->native(false)
                                        ->required()
                                        ->preload(),
                                    DatePicker::make('date_admission')
                                        ->required()
                                        ->label('Admission Date')
                                        ->placeholder('Admission Date')
                                        ->displayFormat('d/m/Y')
                                        ->native(false)
                                        ->default(now())
                                        ->closeOnDateSelection()
                                        ->maxDate(now()),    
                                    TextInput::make('pen')
                                        ->label('Permanent Education Number')
                                        ->placeholder('PEN'), 
                                    Radio::make('phy_challanged')
                                        ->label('Physically challanged?')
                                        ->boolean()
                                        ->inline()
                                        ->inlineLabel(false)
                                        ->default(0), 
                                    Textarea::make('remarks')
                                        ->rows(2)
                                        ->cols(10)
                                        ->placeholder('Remarks'),  

                                ])->compact()->columnSpan(1),
                                

                                Section::make([

                                    SpatieMediaLibraryFileUpload::make('photo')
                                        ->collection('student-images')
                                        ->conversion('thumb')
                                        ->image()
                                        ->imageEditor()
                                        ->maxSize(512),
                                        //->avatar(), 

                                ])->compact()->columnSpan(1),

                            ])->columns(3),
                        Tabs\Tab::make('Personal Information')
                            ->icon('heroicon-o-square-3-stack-3d')
                            ->schema([
                                Section::make([
                                    TextInput::make('nationality')
                                        ->placeholder('e.g. Indian, Nepalese')
                                        ->maxLength(50),
                                    Select::make('caste')
                                        ->options(config('constants.typeCaste'))
                                        ->native(false),
                                    Select::make('food_choice')
                                        ->options(config('constants.typeFoodChoice'))
                                        ->native(false),
                                    Textarea::make('alergic_to')
                                        ->rows(2)
                                        ->cols(10)
                                        ->placeholder('e.g. Sneezing, Runny nose, Vomiting'),
                                    TextInput::make('birth_place')
                                        ->label('Birth Place')
                                        ->placeholder('Birth Place')
                                        ->maxLength(200), 
                                ])->compact()->columnSpan(1),
                                Section::make([
                                    Select::make('religion')
                                        ->options(config('constants.typeReligion'))
                                        ->native(false),
                                    TextInput::make('subcaste')
                                        ->placeholder('Sub Caste')
                                        ->maxLength(25),
                                    TextInput::make('height')
                                        ->integer()
                                        ->label('Height(cm)')
                                        ->placeholder(''),
                                    Textarea::make('medical_history')
                                        ->placeholder('e.g. Had Covid in past')
                                        ->rows(2)
                                        ->cols(10),
                                ])->compact()->columnSpan(1),
                                Section::make([
                                    TextInput::make('mother_tongue')
                                        ->placeholder('e.g. Hindi, English, Punjabi')
                                        ->maxLength(50),
                                    Radio::make('spectacle')
                                        ->label('Use Spectacle?')
                                        ->boolean()
                                        ->inline()
                                        ->inlineLabel(false)
                                        ->default(0),
                                    TextInput::make('weight')
                                        ->integer()
                                        ->label('Weight(kg)')
                                        ->placeholder(''),
                                    Radio::make('eye_contact')
                                        ->label('Use Eye Contact?')
                                        ->boolean()
                                        ->inline()
                                        ->inlineLabel(false)
                                        ->default(1),
                                ])->compact()->columnSpan(1)
                            ])->columns(3),
                        Tabs\Tab::make('Address')
                            ->icon('heroicon-o-envelope')
                            ->schema([
                                Section::make('Current Address')
                                ->schema([
                                    Textarea::make('cur_address')
                                        ->label('Address')
                                        ->rows(2)
                                        ->cols(5)
                                        ->disabled(fn (Get $get): bool => $get('same_addr'))
                                        ->placeholder('Current Address'),
                                    Select::make('cur_state')
                                        ->label('State')
                                        ->options(config('constants.indianStates'))
                                        ->native(false)
                                        ->disabled(fn (Get $get): bool => $get('same_addr'))
                                        ->searchable()
                                        ->preload(),
                                    TextInput::make('cur_city')
                                        ->label('City')
                                        ->disabled(fn (Get $get): bool => $get('same_addr'))
                                        ->placeholder('City'), 
                                    TextInput::make('cur_zip')
                                        ->label('Zip Code')
                                        ->numeric()
                                        ->maxLength(6)
                                        ->disabled(fn (Get $get): bool => $get('same_addr'))
                                        ->placeholder('Zip Code'),     
                                ])->compact()->columnSpan(1),
                                
                                Section::make('Permanent Address')
                                    ->schema([
                                        Checkbox::make('same_addr')
                                            ->label('Same as Current Address?')
                                            ->afterStateUpdated(
                                                fn (Set $set, ?string $state, Get $get) => 
                                                    [
                                                    $set('per_address', ($state)? $get('cur_address'):'' ),
                                                    $set('per_state', ($state)? $get('cur_state'):'' ),
                                                    $set('per_city', ($state)? $get('cur_city'):'' ),
                                                    $set('per_zip', ($state)? $get('cur_zip'):'' ),
                                                    ]
                                                )
                                            ->live(),
                                        Textarea::make('per_address')
                                            ->label('Address')
                                            ->rows(2)
                                            ->cols(5)
                                            ->disabled(fn (Get $get): bool => $get('same_addr'))
                                            ->placeholder('Permanent Address'),
                                        Select::make('per_state')
                                            ->label('State')
                                            ->options(config('constants.indianStates'))
                                            ->native(false)
                                            ->disabled(fn (Get $get): bool => $get('same_addr'))
                                            ->disableOptionWhen(fn (Get $get): bool => $get('same_addr'))
                                            ->searchable()
                                           ->preload(),
                                        TextInput::make('per_city')
                                            ->label('City')
                                            ->disabled(fn (Get $get): bool => $get('same_addr'))
                                            ->placeholder('City'), 
                                        TextInput::make('per_zip')
                                            ->label('Zip Code')
                                            ->numeric()
                                            ->maxLength(6)
                                            ->disabled(fn (Get $get): bool => $get('same_addr'))
                                            ->placeholder('Zip Code'),     
                                    ])->compact()->columnSpan(1),
                            ])->columns(2),
                        Tabs\Tab::make('Parent Details')
                            ->icon('heroicon-o-sun')
                            ->schema([
                                Section::make('Father Details')
                                ->schema([
                                    TextInput::make('father_name')
                                        ->label('Name')
                                        ->maxLength(200)
                                        ->placeholder('Father Name'), 
                                    TextInput::make('f_mobile')
                                        ->label('Mobile')
                                        ->prefix('+91')
                                        ->tel()
                                        ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/')
                                        ->minValue(10)
                                        ->maxValue(10)
                                        ->placeholder('Father Mobile'),
                                    TextInput::make('f_aadhaar')
                                        ->label('Aadhaar No')
                                        ->mask('9999-9999-9999')
                                        ->placeholder('xxxx-xxxx-xxxx'),
                                    TextInput::make('f_education')
                                        ->label('Education')
                                        ->maxLength(100)
                                        ->placeholder('Father Education'),
                                    TextInput::make('f_occupation')
                                        ->label('Occupation')
                                        ->maxLength(100)
                                        ->placeholder('Father Occupation'),
                                    TextInput::make('f_income')
                                        ->label('Annual Income')
                                        ->numeric()
                                        ->mask(RawJs::make('$money($input)'))
                                        ->stripCharacters(',')
                                        ->prefixIcon('heroicon-s-currency-rupee')
                                        ->placeholder('Father Annual Income'),
                                    TextInput::make('f_designation')
                                        ->label('Designation')
                                        ->maxLength(100)
                                        ->placeholder('Father Designation'),    
                                ])->compact()->columnSpan(1),
                                Section::make('Mother Details')
                                ->schema([
                                    TextInput::make('mother_name')
                                        ->label('Name')
                                        ->maxLength(200)
                                        ->placeholder('Mother Name'), 
                                    TextInput::make('m_mobile')
                                        ->label('Mobile')
                                        ->prefix('+91')
                                        ->tel()
                                        ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/')
                                        ->minValue(10)
                                        ->maxValue(10)
                                        ->placeholder('Mother Mobile'),
                                    TextInput::make('m_aadhaar')
                                        ->label('Aadhaar No')
                                        ->mask('9999-9999-9999')
                                        ->placeholder('xxxx-xxxx-xxxx'),
                                    TextInput::make('m_education')
                                        ->label('Education')
                                        ->maxLength(100)
                                        ->placeholder('Mother Education'),
                                    TextInput::make('m_occupation')
                                        ->label('Occupation')
                                        ->maxLength(100)
                                        ->placeholder('Mother Occupation'),
                                    TextInput::make('m_income')
                                        ->label('Annual Income')
                                        ->numeric()
                                        ->mask(RawJs::make('$money($input)'))
                                        ->stripCharacters(',')
                                        ->prefixIcon('heroicon-s-currency-rupee')
                                        ->placeholder('Mother Annual Income'),
                                    TextInput::make('m_designation')
                                        ->label('Designation')
                                        ->maxLength(100)
                                        ->placeholder('Mother Designation'),
                                ])->compact()->columnSpan(1),
                            ])->columns(2),
                    ])->persistTabInQueryString('active-tab'),
                ])->columns(1);
    }
   
    public static function table(Table $table): Table
    {
       return $table
            ->columns([
                TextColumn::make('roll_no')->sortable()->searchable(),
                SpatieMediaLibraryImageColumn::make('photo')
                    ->collection('student-images')
                    ->conversion('thumb')
                    ->circular()
                    ->defaultImageUrl( fn (Student $record): string => 
                        ($record->gender == '1')? url('/images/user-male-thumb.png') : url('/images/user-female-thumb.png')
                    ),
                TextColumn::make('enroll_no')->label('Enroll No')->sortable()->searchable(),
                TextColumn::make('full_name')->state(function (Student $record): string {
                    return $record->first_name.' '.$record->last_name;
                })
                ->sortable(query: function (Builder $query, string $direction): Builder {
                    return $query
                        ->orderBy('first_name', $direction)
                        ->orderBy('last_name', $direction);
                }),
                TextColumn::make('class.class')->sortable()->searchable(),
                TextColumn::make('branch.branch_name')->sortable()->searchable(),
                TextColumn::make('section.section')->sortable()->searchable(),
                TextColumn::make('dob')->label('Date of Birth')->sortable()->date(),
                TextColumn::make('status')->placeholder('Status')->badge()
                ->state(function (Student $record): string {
                    return config('constants.typeStudentStatus')[$record->status];
                })
                ->color(fn (string $state): string => match ($state) {
                    'Active'        => 'success',
                    'Inactive'      => 'warning',
                    'Discontinued'  => 'gray',
                    'Relieved'      => 'danger'
                }),
            ])
            ->filters([
                SelectFilter::make('status')
                ->options(config('constants.typeStudentStatus')),
            ])
            ->actions([
                Actions\EditAction::make(),
            ])
            ->bulkActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ]);


    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => StudentPages\ListStudents::route('/'),
            'create' => StudentPages\CreateStudent::route('/create'),
            'edit' => StudentPages\EditStudent::route('/{record}/edit'),
        ];
    }
}
